'use client';

import { useState } from 'react';
import { 
  Search as SearchIcon, 
  Clear as ClearIcon,
  Sort as SortIcon,
  FilterList as FilterListIcon,
  Tune as TuneIcon 
} from '@mui/icons-material';
import { 
  TextField, 
  InputAdornment, 
  IconButton, 
  Select, 
  MenuItem, 
  FormControl, 
  InputLabel, 
  Chip, 
  Button,
  Collapse,
  Box
} from '@mui/material';
import { useFilter, usePortfolioStore } from '../../../store/portfolioStore';

export default function PortfolioSearchFilters() {
  const filter = useFilter();
  const { setFilter, resetFilter } = usePortfolioStore();
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [localSearchQuery, setLocalSearchQuery] = useState(filter.searchQuery);

  const handleSearchSubmit = () => {
    setFilter({ searchQuery: localSearchQuery });
  };

  const handleSearchKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearchSubmit();
    }
  };

  const clearSearch = () => {
    setLocalSearchQuery('');
    setFilter({ searchQuery: '' });
  };

  const handleSortChange = (sortBy: 'newest' | 'oldest' | 'title') => {
    setFilter({ sortBy });
  };

  const isFiltered = filter.searchQuery || filter.activeCategory !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' || filter.sortBy !== 'newest';

  return (
    <div className="space-y-4">
      {/* Search Bar */}
      <div className="flex flex-col sm:flex-row gap-4 items-center">
        <div className="flex-1 min-w-0">
          <TextField
            fullWidth
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (‡∏ä‡∏∑‡πà‡∏≠, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó, ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...)"
            value={localSearchQuery}
            onChange={(e) => setLocalSearchQuery(e.target.value)}
            onKeyPress={handleSearchKeyPress}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon className="text-gray-400" />
                </InputAdornment>
              ),
              endAdornment: localSearchQuery && (
                <InputAdornment position="end">
                  <IconButton size="small" onClick={clearSearch} title="‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤">
                    <ClearIcon />
                  </IconButton>
                </InputAdornment>
              ),
            }}
            variant="outlined"
            size="small"
            className="bg-white"
          />
        </div>

        <div className="flex gap-2">
          <Button
            variant="contained"
            onClick={handleSearchSubmit}
            startIcon={<SearchIcon />}
            className="whitespace-nowrap"
            disabled={localSearchQuery === filter.searchQuery}
          >
            ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          </Button>
          
          <IconButton 
            onClick={() => setShowAdvanced(!showAdvanced)}
            className={`${showAdvanced ? 'bg-blue-100 text-blue-600' : 'bg-gray-100'}`}
            title="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á"
          >
            <TuneIcon />
          </IconButton>
        </div>
      </div>

      {/* Advanced Filters */}
      <Collapse in={showAdvanced}>
        <Box className="p-4 bg-gray-50 rounded-lg border">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
            {/* Sort Options */}
            <FormControl size="small" fullWidth>
              <InputLabel>‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö</InputLabel>
              <Select
                value={filter.sortBy}
                label="‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö"
                onChange={(e) => handleSortChange(e.target.value as any)}
                startAdornment={<SortIcon className="mr-2 text-gray-500" />}
              >
                <MenuItem value="newest">‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</MenuItem>
                <MenuItem value="oldest">‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</MenuItem>
                <MenuItem value="title">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (A-Z)</MenuItem>
              </Select>
            </FormControl>

            {/* Quick Actions */}
            <div className="flex gap-2">
              <Button
                variant="outlined"
                size="small"
                startIcon={<FilterListIcon />}
                onClick={() => setFilter({ 
                  searchQuery: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ OR ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà OR ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
                })}
                disabled={filter.searchQuery.includes('‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ OR ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà')}
              >
                ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
              </Button>
              
              <Button
                variant="outlined"
                size="small"
                startIcon={<FilterListIcon />}
                onClick={() => setFilter({ 
                  searchQuery: '‡∏ö‡πâ‡∏≤‡∏ô OR ‡∏û‡∏±‡∏Å‡∏≠‡∏≤‡∏®‡∏±‡∏¢ OR ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô',
                })}
                disabled={filter.searchQuery.includes('‡∏ö‡πâ‡∏≤‡∏ô OR ‡∏û‡∏±‡∏Å‡∏≠‡∏≤‡∏®‡∏±‡∏¢')}
              >
                ‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å
              </Button>
            </div>

            {/* Reset Button */}
            <Button
              variant="outlined"
              size="small"
              onClick={resetFilter}
              disabled={!isFiltered}
              className="justify-self-end"
            >
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </Button>
          </div>
        </Box>
      </Collapse>

      {/* Active Filters Display */}
      {isFiltered && (
        <div className="flex flex-wrap gap-2 items-center">
          <span className="text-sm text-gray-600 font-medium">‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</span>
          
          {filter.searchQuery && (
            <Chip
              label={`‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: "${filter.searchQuery}"`}
              onDelete={() => setFilter({ searchQuery: '' })}
              color="primary"
              variant="outlined"
              size="small"
            />
          )}
          
          {filter.activeCategory !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' && (
            <Chip
              label={`‡∏´‡∏°‡∏ß‡∏î: ${filter.activeCategory}`}
              onDelete={() => setFilter({ activeCategory: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' })}
              color="secondary"
              variant="outlined"
              size="small"
            />
          )}
          
          {filter.sortBy !== 'newest' && (
            <Chip
              label={`‡πÄ‡∏£‡∏µ‡∏¢‡∏á: ${filter.sortBy === 'oldest' ? '‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î' : filter.sortBy === 'title' ? '‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå' : filter.sortBy}`}
              onDelete={() => setFilter({ sortBy: 'newest' })}
              color="default"
              variant="outlined"
              size="small"
            />
          )}
        </div>
      )}

      {/* Search Tips */}
      {showAdvanced && (
        <div className="text-xs text-gray-500 bg-blue-50 p-3 rounded-lg">
          <p className="font-medium mb-1">üí° ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:</p>
          <ul className="space-y-1 ml-4">
            <li>‚Ä¢ ‡πÉ‡∏ä‡πâ OR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô &quot;‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ OR ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà&quot;</li>
            <li>‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</li>
            <li>‚Ä¢ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Enter ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å &quot;‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤&quot; ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</li>
          </ul>
        </div>
      )}
    </div>
  );
}